#!/bin/bash

# 🚀 Serenyx Firebase Setup Script
# This script helps you set up Firebase for your Serenyx app

echo "🔥 Welcome to Serenyx Firebase Setup! 🔥"
echo "=========================================="
echo ""

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    echo "❌ Flutter is not installed or not in PATH"
    echo "Please install Flutter first: https://flutter.dev/docs/get-started/install"
    exit 1
fi

echo "✅ Flutter is installed"
echo ""

# Check if project is a Flutter project
if [ ! -f "pubspec.yaml" ]; then
    echo "❌ This doesn't appear to be a Flutter project"
    echo "Please run this script from your Flutter project root directory"
    exit 1
fi

echo "✅ Flutter project detected"
echo ""

# Install FlutterFire CLI
echo "📦 Installing FlutterFire CLI..."
dart pub global activate flutterfire_cli

if [ $? -eq 0 ]; then
    echo "✅ FlutterFire CLI installed successfully"
else
    echo "❌ Failed to install FlutterFire CLI"
    echo "Please install manually: dart pub global activate flutterfire_cli"
fi

echo ""

# Check if Firebase project ID is provided
if [ -z "$1" ]; then
    echo "📝 Please provide your Firebase project ID:"
    echo "Usage: ./setup_firebase.sh YOUR_PROJECT_ID"
    echo ""
    echo "If you don't have a Firebase project yet:"
    echo "1. Go to https://console.firebase.google.com/"
    echo "2. Create a new project"
    echo "3. Copy the project ID"
    echo "4. Run this script again with the project ID"
    exit 1
fi

PROJECT_ID=$1
echo "🎯 Setting up Firebase for project: $PROJECT_ID"
echo ""

# Create .env file template
echo "📝 Creating .env file template..."
cat > .env.template << EOF
# Firebase Configuration
FIREBASE_PROJECT_ID=$PROJECT_ID
FIREBASE_API_KEY=your_api_key_here
FIREBASE_AUTH_DOMAIN=$PROJECT_ID.firebaseapp.com
FIREBASE_STORAGE_BUCKET=$PROJECT_ID.appspot.com
FIREBASE_MESSAGING_SENDER_ID=your_sender_id_here
FIREBASE_APP_ID=your_app_id_here

# AI API Keys (Optional - for production)
OPENAI_API_KEY=your_openai_key_here
GOOGLE_AI_API_KEY=your_google_ai_key_here
ANTHROPIC_API_KEY=your_anthropic_key_here
EOF

echo "✅ Created .env.template file"
echo ""

# Create firebase_options.dart template
echo "📝 Creating firebase_options.dart template..."
cat > lib/firebase_options_template.dart << EOF
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  // TODO: Replace with your actual Firebase project configuration
  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'YOUR_WEB_API_KEY',
    appId: 'YOUR_WEB_APP_ID',
    messagingSenderId: 'YOUR_SENDER_ID',
    projectId: '$PROJECT_ID',
    authDomain: '$PROJECT_ID.firebaseapp.com',
    storageBucket: '$PROJECT_ID.appspot.com',
    measurementId: 'YOUR_MEASUREMENT_ID',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'YOUR_ANDROID_API_KEY',
    appId: 'YOUR_ANDROID_APP_ID',
    messagingSenderId: 'YOUR_SENDER_ID',
    projectId: '$PROJECT_ID',
    storageBucket: '$PROJECT_ID.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'YOUR_IOS_API_KEY',
    appId: 'YOUR_IOS_APP_ID',
    messagingSenderId: 'YOUR_SENDER_ID',
    projectId: '$PROJECT_ID',
    storageBucket: '$PROJECT_ID.appspot.com',
    iosBundleId: 'com.yourcompany.serenyx',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'YOUR_MACOS_API_KEY',
    appId: 'YOUR_MACOS_APP_ID',
    messagingSenderId: 'YOUR_SENDER_ID',
    projectId: '$PROJECT_ID',
    storageBucket: '$PROJECT_ID.appspot.com',
    iosBundleId: 'com.yourcompany.serenyx',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'YOUR_WINDOWS_API_KEY',
    appId: 'YOUR_WINDOWS_APP_ID',
    messagingSenderId: 'YOUR_SENDER_ID',
    projectId: '$PROJECT_ID',
    storageBucket: '$PROJECT_ID.appspot.com',
  );
}
EOF

echo "✅ Created firebase_options.dart template"
echo ""

# Instructions
echo "🎯 NEXT STEPS:"
echo "==============="
echo ""
echo "1. 🔥 Go to https://console.firebase.google.com/"
echo "   - Create project: $PROJECT_ID"
echo "   - Enable Authentication, Firestore, Storage, Messaging"
echo ""
echo "2. 📱 Add your apps:"
echo "   - Web app: $PROJECT_ID.firebaseapp.com"
echo "   - Android: com.yourcompany.serenyx"
echo "   - iOS: com.yourcompany.serenyx"
echo ""
echo "3. 📋 Copy configuration values:"
echo "   - Update lib/firebase_options.dart with real values"
echo "   - Download google-services.json for Android"
echo "   - Download GoogleService-Info.plist for iOS"
echo ""
echo "4. 🔒 Set up security rules:"
echo "   - Firestore rules (see FIREBASE_SETUP_GUIDE.md)"
echo "   - Storage rules (see FIREBASE_SETUP_GUIDE.md)"
echo ""
echo "5. 🚀 Test your setup:"
echo "   - Run: flutter run"
echo "   - Check console for Firebase initialization success"
echo ""
echo "6. 📚 Read the complete guide:"
echo "   - FIREBASE_SETUP_GUIDE.md"
echo ""
echo "✅ Setup script completed!"
echo "🔥 Happy coding with Firebase!"